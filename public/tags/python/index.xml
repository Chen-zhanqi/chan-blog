<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Python - Tag - 辰深-技术与生活</title>
        <link>https://www.chenzqi.cn/tags/python/</link>
        <description>Python - Tag - 辰深-技术与生活</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>czq181020@gmail.com (辰深)</managingEditor>
            <webMaster>czq181020@gmail.com (辰深)</webMaster><lastBuildDate>Sat, 10 Apr 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.chenzqi.cn/tags/python/" rel="self" type="application/rss+xml" /><item>
    <title>pyinstaller打包scrapy项目</title>
    <link>https://www.chenzqi.cn/posts/2021/20210410_pyinstaller%E6%89%93%E5%8C%85scrapy%E9%A1%B9%E7%9B%AE/</link>
    <pubDate>Sat, 10 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2021/20210410_pyinstaller%E6%89%93%E5%8C%85scrapy%E9%A1%B9%E7%9B%AE/</guid>
    <description><![CDATA[简介 pyinstaller -F xxx.py 打包后会生成xxx.spec文件，，spec文件其实就相当于一个打包的架构文件，里面写了要怎么打包，类似于docker中的Dock]]></description>
</item>
<item>
    <title>jwt 生成与验证 - Python</title>
    <link>https://www.chenzqi.cn/posts/2021/20210320_jwt%E7%94%9F%E6%88%90%E4%B8%8E%E9%AA%8C%E8%AF%81/</link>
    <pubDate>Sat, 20 Mar 2021 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2021/20210320_jwt%E7%94%9F%E6%88%90%E4%B8%8E%E9%AA%8C%E8%AF%81/</guid>
    <description><![CDATA[生成与验证 data: 自定义数据, 如 {'username':user_name, 'user_id': user_info.id} 验证通过后在payload中获取 import jwt from datetime import datetime,timedelta SECRECT_KEY = b&#39;\x92R!\x8e\xc6\x9c\xb3\x89#\xa6\x0c\xcb\xf6\xcb\xd7\xc&#39; def genToken(data): expInt = datetime.utcnow() + timedelta(days=1) iat = datetime.utcnow() payload = { &#39;exp&#39;: expInt, &#39;iat&#39;: iat, &#39;data&#39;: data } token = jwt.encode(payload, key = SECRECT_KEY, algorithm=&#39;HS256&#39;) return bytes.decode(token)]]></description>
</item>
<item>
    <title>PyQt5多页面跳转</title>
    <link>https://www.chenzqi.cn/posts/2020/20200720_pyqt5%E5%A4%9A%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</link>
    <pubDate>Mon, 20 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2020/20200720_pyqt5%E5%A4%9A%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</guid>
    <description><![CDATA[::: tip Qt designer 和 代码进行 Qt 开发实现页面跳转不同，本文记录 designer 开发 ::: PyQt5 多页面跳转 借助一个 Controller 控制器来实现，大体思路如下 # 利用一个控制器来控制页面的跳转 class]]></description>
</item>
<item>
    <title>MySQL连接池</title>
    <link>https://www.chenzqi.cn/posts/2020/20200710_mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
    <pubDate>Fri, 10 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2020/20200710_mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
    <description><![CDATA[::: tip 每次连接mysql数据库请求时，都是独立的去请求访问，浪费资源，访问数量达到一定数量时，对mysql的性能会产生较大的影响。因此，通常会]]></description>
</item>
<item>
    <title>SQL写入与更新语句优化</title>
    <link>https://www.chenzqi.cn/posts/2020/20200629_sql%E5%86%99%E5%85%A5%E4%B8%8E%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/</link>
    <pubDate>Mon, 29 Jun 2020 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2020/20200629_sql%E5%86%99%E5%85%A5%E4%B8%8E%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/</guid>
    <description><![CDATA[::: tip SQL写入与更新语句优化记录 ::: 数据 # 要写入的字典数据 data_dict = dict( fzID=data.get(&#39;fzID&#39;), statusCode=data.get(&#39;statusCode&#39;), statusName=data.get(&#39;statusName&#39;), thumb=data.get(&#34;thumb&#34;), atArea=data.get(&#34;atArea&#34;), buildingName=data.get(&#34;buildingName&#34;), communityName=data.get(&#34;communityName&#34;), areaSize=data.get(&#34;areaSize&#34;), startPrice=data.get(&#34;startPrice&#34;), currentPrice=data.get(&#34;currentPrice&#34;), unitPrice=data.get(&#34;unitPrice&#34;), buildingType=data.get(&#34;buildingType&#34;), bTypeName=data.get(&#34;bTypeName&#34;), taxesBy=data.get(&#34;taxesBy&#34;), taxesName=data.get(&#34;taxesName&#34;), canLoan=data.get(&#34;canLoan&#34;), LoanText=data.get(&#34;LoanText&#34;), discountRate=data.get(&#34;discountRate&#34;), puchaseLimit=data.get(&#34;puchaseLimit&#34;), countyName=countyName, startTime=data.get(&#34;startTime&#34;), endTime=data.get(&#34;endTime&#34;), editDate=data.get(&#34;editDate&#34;), competePersons=data.get(&#34;competePersons&#34;), callTimes=data.get(&#34;callTimes&#34;), yijialv=data.get(&#34;yijialv&#34;), ccode=data.get(&#34;ccode&#34;), ajklink=data.get(&#34;ajklink&#34;), bemetro=data.get(&#34;bemetro&#34;), jiaofu=jiaofu ) # data_dict = { # &#39;fzID&#39;: &#39;6342304417171&#39;, #]]></description>
</item>
<item>
    <title>JS逆向 - Python调用JS代码</title>
    <link>https://www.chenzqi.cn/posts/2020/20200511_js-%E9%80%86%E5%90%91--python-%E8%B0%83%E7%94%A8js%E4%BB%A3%E7%A0%81/</link>
    <pubDate>Mon, 11 May 2020 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2020/20200511_js-%E9%80%86%E5%90%91--python-%E8%B0%83%E7%94%A8js%E4%BB%A3%E7%A0%81/</guid>
    <description><![CDATA[:::tip 使用python执行JS代码 ::: 简介 对于简单的 JS 来说，可以通过 Python 代码，直接重写，轻轻松松的就能搞定。 而对于复的 JS 代码，由于代码过于复杂，重写]]></description>
</item>
<item>
    <title>Elasticsearch介绍与Python实现</title>
    <link>https://www.chenzqi.cn/posts/2019/20190610_elasticsearch%E4%BB%8B%E7%BB%8D%E4%B8%8Epython%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Mon, 10 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2019/20190610_elasticsearch%E4%BB%8B%E7%BB%8D%E4%B8%8Epython%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[简介 分布式的实时文档存储，每个字段可以被索引与搜索 分布式实时分析搜索引擎 胜任上百个服务节点的扩展，支持 PB 级别的结构化或者非结构化数据 Elasticsearch 的安装]]></description>
</item>
<item>
    <title>Selenium Python 自动化</title>
    <link>https://www.chenzqi.cn/posts/2019/20190530_selenium-python-%E8%87%AA%E5%8A%A8%E5%8C%96/</link>
    <pubDate>Thu, 30 May 2019 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2019/20190530_selenium-python-%E8%87%AA%E5%8A%A8%E5%8C%96/</guid>
    <description><![CDATA[准备工作 安装seleniumm pip install selenium 下载浏览器驱动 Firefox浏览器驱动：geckodriver Chrome浏览器驱动：chromedri]]></description>
</item>
<item>
    <title>selenium启动Chrome配置参数</title>
    <link>https://www.chenzqi.cn/posts/2019/20190530_selenium%E5%90%AF%E5%8A%A8chrome%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/</link>
    <pubDate>Thu, 30 May 2019 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2019/20190530_selenium%E5%90%AF%E5%8A%A8chrome%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/</guid>
    <description><![CDATA[:::tip selenium配置 ::: 每次当selenium启动chrome浏览器的时候，chrome浏览器很干净，没有插件、没有收藏、没有历史记录，这是]]></description>
</item>
<item>
    <title>异常处理库merry的用法</title>
    <link>https://www.chenzqi.cn/posts/2019/20190521_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%BA%93merry/</link>
    <pubDate>Tue, 21 May 2019 00:00:00 &#43;0000</pubDate>
    <author>辰深</author>
    <guid>https://www.chenzqi.cn/posts/2019/20190521_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%BA%93merry/</guid>
    <description><![CDATA[实例 算术运算和文件写入的例子 def process(num1, num2, file): result = num1 / num2 with open(file, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f: f.write(str(result)) 定义了一个 process 方法，接收三个参数，前两个参数是 num1 和 num2，第三个参数是 file。]]></description>
</item>
</channel>
</rss>
